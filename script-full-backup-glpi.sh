#!/bin/bash
#
# GLPI Backup Script (Version am√©lior√©e)
# --------------------------------------
# Ce script effectue :
#   - un dump de la base MySQL (avec .my.cnf pour la s√©curit√©)
#   - la cr√©ation d'une archive compress√©e du dossier GLPI + dump
#   - le nettoyage automatique pour ne garder que 3 sauvegardes
#   - validation des pr√©requis et gestion d'erreurs renforc√©e
#
# Auteur    : Gr√©gory Roussel
# Version   : 2.0
# Date      : 2025-09-18
# Licence   : MIT (voir d√©tails ci-dessous)
#
# Utilisation :
#   1. Cr√©er un fichier ~/.my.cnf avec les identifiants MySQL :
#      [client]
#      user=YOUR_DB_USER
#      password=YOUR_DB_PASSWORD
#      host=localhost
#      
#      chmod 600 ~/.my.cnf
#   
#   2. Modifier les variables de configuration (BACKUP_DIR, GLPI_DIR, DB_NAME)
#   3. Lancer manuellement ou via cron (exemple : tous les jours √† 2h du matin)
#
# Exemple de cron :
#   0 2 * * * /home/username/script-backup-glpi.sh >> /var/log/backup-glpi.log 2>&1
#
# D√©pendances :
#   - mysqldump
#   - tar
#   - gzip
#   - bash >= 4
#
# Licence MIT :
#   Permission est accord√©e, gratuitement, √† toute personne obtenant une copie
#   de ce logiciel et des fichiers de documentation associ√©s (le "Logiciel"),
#   de commercialiser, utiliser, copier, modifier, fusionner, publier,
#   distribuer, sous-licencier et/ou vendre des copies du Logiciel, et de
#   permettre aux personnes auxquelles le Logiciel est fourni de le faire,
#   sous r√©serve des conditions suivantes :
#
#   Le texte ci-dessus doit √™tre inclus dans toutes copies ou parties substantielles du Logiciel.
#   LE LOGICIEL EST FOURNI "EN L'√âTAT", SANS GARANTIE D'AUCUNE SORTE.

# -------------------------
# FONCTIONS UTILITAIRES
# -------------------------

# Fonction de log avec timestamp
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Fonction de log d'erreur et sortie
error_exit() {
    log "‚ùå ERREUR: $1"
    exit 1
}

# -------------------------
# CONFIGURATION
# -------------------------
BACKUP_DIR="YOUR_BACKUP_DIR"
GLPI_DIR="YOUR_GLPI_DIR"
DATE=$(date +%Y%m%d-%H%M%S)
BACKUP_FILE="$BACKUP_DIR/glpi-backup-$DATE.tar.gz"

# Base de donn√©es (utilise ~/.my.cnf pour les identifiants)
DB_NAME="YOUR_DB_NAME"
MYSQL_CONFIG="$HOME/.my.cnf"

# Nombre maximum de sauvegardes √† conserver
MAX_BACKUPS=3

# -------------------------
# VALIDATION DES PR√âREQUIS
# -------------------------

log "üîç V√©rification des pr√©requis..."

# V√©rifier que les variables essentielles sont d√©finies
if [[ -z "$BACKUP_DIR" || -z "$GLPI_DIR" || -z "$DB_NAME" ]]; then
    error_exit "Variables de configuration manquantes. V√©rifiez BACKUP_DIR, GLPI_DIR et DB_NAME."
fi

# V√©rifier que les variables ne contiennent pas les valeurs par d√©faut
if [[ "$BACKUP_DIR" == "YOUR_BACKUP_DIR" || "$GLPI_DIR" == "YOUR_GLPI_DIR" || "$DB_NAME" == "YOUR_DB_NAME" ]]; then
    error_exit "Veuillez modifier les variables de configuration (remplacer YOUR_* par les vraies valeurs)"
fi

# V√©rifier la disponibilit√© des outils requis
for cmd in mysqldump tar gzip; do
    if ! command -v "$cmd" &> /dev/null; then
        error_exit "$cmd n'est pas install√© ou accessible"
    fi
done
log "‚úÖ Outils requis disponibles"

# V√©rifier l'existence du fichier de configuration MySQL
if [[ ! -f "$MYSQL_CONFIG" ]]; then
    error_exit "Fichier de configuration MySQL non trouv√©: $MYSQL_CONFIG"
fi

# V√©rifier les permissions du fichier de configuration MySQL
if [[ "$(stat -c %a "$MYSQL_CONFIG")" != "600" ]]; then
    log "‚ö†Ô∏è  Permissions du fichier $MYSQL_CONFIG non s√©curis√©es. Application de chmod 600..."
    chmod 600 "$MYSQL_CONFIG"
fi

# V√©rifier l'existence du r√©pertoire GLPI
if [[ ! -d "$GLPI_DIR" ]]; then
    error_exit "R√©pertoire GLPI non trouv√©: $GLPI_DIR"
fi
log "‚úÖ Pr√©requis valid√©s"

# -------------------------
# CR√âATION DU DOSSIER DE BACKUP
# -------------------------
log "üìÅ Cr√©ation du dossier de backup..."
if ! mkdir -p "$BACKUP_DIR"; then
    error_exit "Impossible de cr√©er le dossier de backup: $BACKUP_DIR"
fi
log "‚úÖ Dossier de backup cr√©√© ou existant: $BACKUP_DIR"

# -------------------------
# DUMP DE LA BASE DE DONN√âES
# -------------------------
log "üíæ Dump de la base de donn√©es '$DB_NAME'..."
SQL_DUMP="$BACKUP_DIR/glpi-$DATE.sql"

# Utilisation du fichier .my.cnf pour la connexion s√©curis√©e
if ! mysqldump --defaults-file="$MYSQL_CONFIG" \
               --single-transaction \
               --routines \
               --triggers \
               "$DB_NAME" > "$SQL_DUMP"; then
    error_exit "√âchec du dump de la base de donn√©es"
fi

# V√©rifier que le dump n'est pas vide
if [[ ! -s "$SQL_DUMP" ]]; then
    error_exit "Le fichier dump est vide"
fi

log "‚úÖ Dump r√©ussi: $SQL_DUMP ($(du -h "$SQL_DUMP" | cut -f1))"

# -------------------------
# PR√âPARATION DES CHEMINS POUR TAR
# -------------------------
GLPI_PARENT="$(dirname "$GLPI_DIR")"
GLPI_BASE="$(basename "$GLPI_DIR")"

# -------------------------
# CR√âATION DE L'ARCHIVE
# -------------------------
log "üì¶ Cr√©ation de l'archive avec chemins relatifs..."
if ! tar -czf "$BACKUP_FILE" \
         --exclude="$GLPI_BASE/files/_cache" \
         --exclude="$GLPI_BASE/files/_tmp" \
         --exclude="$GLPI_BASE/files/_log/*.log" \
         -C "$GLPI_PARENT" "$GLPI_BASE" \
         -C "$BACKUP_DIR" "$(basename "$SQL_DUMP")"; then
    error_exit "√âchec de la cr√©ation de l'archive"
fi

# S√©curiser les permissions de l'archive
chmod 600 "$BACKUP_FILE"

log "‚úÖ Archive cr√©√©e: $BACKUP_FILE ($(du -h "$BACKUP_FILE" | cut -f1))"

# Supprimer le dump SQL temporaire
rm -f "$SQL_DUMP"
log "üóëÔ∏è Dump SQL temporaire supprim√©"

# -------------------------
# NETTOYAGE DES ANCIENNES SAUVEGARDES
# -------------------------
log "üóëÔ∏è Nettoyage des anciennes sauvegardes (max $MAX_BACKUPS)..."

cd "$BACKUP_DIR" || error_exit "Impossible d'acc√©der au dossier de backup"

# Compter le nombre de sauvegardes existantes
BACKUP_COUNT=$(ls -1 glpi-backup-*.tar.gz 2>/dev/null | wc -l)

if [[ $BACKUP_COUNT -gt $MAX_BACKUPS ]]; then
    # Supprimer les sauvegardes les plus anciennes
    BACKUPS_TO_DELETE=$((BACKUP_COUNT - MAX_BACKUPS))
    DELETED_FILES=$(ls -1t glpi-backup-*.tar.gz | tail -n "+$((MAX_BACKUPS + 1))" | xargs -r rm -fv)
    
    if [[ -n "$DELETED_FILES" ]]; then
        log "üóëÔ∏è Sauvegardes supprim√©es:"
        echo "$DELETED_FILES" | while read -r file; do
            log "  - $(basename "$file")"
        done
    fi
else
    log "‚úÖ Aucune sauvegarde √† supprimer ($BACKUP_COUNT/$MAX_BACKUPS)"
fi

# -------------------------
# R√âSUM√â FINAL
# -------------------------
FINAL_COUNT=$(ls -1 glpi-backup-*.tar.gz 2>/dev/null | wc -l)
TOTAL_SIZE=$(du -sh glpi-backup-*.tar.gz 2>/dev/null | awk '{sum += $1} END {print sum}' | numfmt --to=iec --suffix=B)

log "üéâ Sauvegarde termin√©e avec succ√®s!"
log "üìä R√©sum√©:"
log "   - Fichier cr√©√©: $(basename "$BACKUP_FILE")"
log "   - Taille: $(du -h "$BACKUP_FILE" | cut -f1)"
log "   - Sauvegardes totales: $FINAL_COUNT/$MAX_BACKUPS"
log "   - Espace utilis√©: ${TOTAL_SIZE:-N/A}"

# -------------------------
# ENVOI SUR S3 CUSTOM (d√©sactiv√© pour l'instant)
# -------------------------
# D√©commentez et configurez cette section pour l'envoi automatique sur S3
#
# S3_ENDPOINT="YOUR_S3_ENDPOINT"
# S3_BUCKET="YOUR_S3_BUCKET"
# S3_PATH="glpi-backups"
# AWS_CMD="aws"
#
# log "‚òÅÔ∏è Envoi sur S3..."
# if "$AWS_CMD" --endpoint-url "$S3_ENDPOINT" s3 cp "$BACKUP_FILE" "s3://$S3_BUCKET/$S3_PATH/" --no-verify-ssl; then
#     log "‚úÖ Envoi S3 r√©ussi: s3://$S3_BUCKET/$S3_PATH/$(basename "$BACKUP_FILE")"
# else
#     error_exit "√âchec de l'envoi S3"
# fi

exit 0
